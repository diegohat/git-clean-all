git-clean-all() {
  # Define o diret√≥rio base como o primeiro argumento, ou usa ~/Repositories por padr√£o.
  local base_dir="${1:-$HOME/Repositories}"
  local repos

  # Busca todos os diret√≥rios que possuem um subdiret√≥rio .git, ignorando outros arquivos e diret√≥rios.
  repos=($(find "$base_dir" -type d -name ".git" -prune | xargs -n1 dirname))

  # Para cada reposit√≥rio encontrado:
  for repo in "${repos[@]}"; do
    echo "üìÅ Reposit√≥rio: $repo"
    # Entra no diret√≥rio do reposit√≥rio. Se falhar, ignora e vai para o pr√≥ximo.
    cd "$repo" || continue

    # Atualiza informa√ß√µes dos remotos e remove refer√™ncias obsoletas.
    echo "üîÑ Buscando e limpando remotos..."
    git fetch --all --prune

    # Verifica se o reposit√≥rio possui commits (HEAD v√°lido).
    if git rev-parse --verify HEAD >/dev/null 2>&1; then
      current_branch=$(git rev-parse --abbrev-ref HEAD)
    else
      current_branch="(sem commits)"
      echo "üö´ O reposit√≥rio '$repo' n√£o possui commits. Pulando limpeza de branches. ‚è≠Ô∏è"
      echo "-----------------------------------------------"
      continue
    fi

    # Alerta sobre altera√ß√µes n√£o comitadas/adicionadas, mostrando a branch atual.
    if [[ -n $(git status --porcelain) ]]; then
      echo "‚ö†Ô∏è  Altera√ß√µes n√£o comitadas detectadas em $repo na branch '$current_branch'. Tentando continuar assim mesmo... üõ†Ô∏è"
    fi

    # Tenta trocar para a branch 'develop' ou 'main', se existirem.
    echo "üîÄ Alternando para a branch 'develop' ou 'main', se poss√≠vel..."
    git checkout develop 2>/dev/null || git checkout main 2>/dev/null

    local branches=()
    # Busca todas as branches locais √≥rf√£s (que apontam para remotes removidos).
    # Usa 'git branch -vv' e filtra as que possuem ': gone]' na descri√ß√£o.
    while IFS= read -r branch; do
      clean_branch="$(echo "$branch" | sed 's/^\* //;s/^[[:space:]]*//;s/[[:space:]]*$//')"
      if [[ -n "$clean_branch" && "$clean_branch" != "*" ]]; then
        branches+=("$clean_branch")
      fi
    done < <(git branch -vv | awk '/: gone]/{print $1}')

    # Se n√£o houver branches √≥rf√£s, avisa o usu√°rio.
    if [[ ${#branches[@]} -eq 0 ]]; then
      echo "‚ú® Nenhuma branch √≥rf√£ encontrada. üçÉ"
    else
      echo "üóëÔ∏è  Branches √≥rf√£s a serem deletadas:"
      # Para cada branch √≥rf√£ encontrada, tenta deletar (exceto a branch atual).
      for branch in "${branches[@]}"; do
        # N√£o tenta deletar a branch atualmente checada.
        if [[ "$branch" != "$(git rev-parse --abbrev-ref HEAD)" ]]; then
          if git branch -d "$branch"; then
            echo "  ‚úîÔ∏è Deletada: $branch üßπ"
          else
            echo "  ‚ùå N√£o foi poss√≠vel deletar: $branch (pode ter altera√ß√µes n√£o mescladas) üö´"
          fi
        else
          echo "  ‚è≠Ô∏è  Pulando a branch atual: $branch üö¶"
        fi
      done
    fi
    echo "-----------------------------------------------"
  done

  # Volta para o diret√≥rio home ao final (por conveni√™ncia).
  cd ~
  echo "‚úÖ Todos os reposit√≥rios processados! üéâ"
}